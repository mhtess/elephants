var probability = function(Dist, x) {
  return Math.exp(Dist.score(x));
}

// var bins = [
//  0.01,0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,
//  0.5,0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95,0.99
// ];

// var theta_bins = [
  // 0.01, 0.05,0.1,0.15,0.2,0.25,0.3,0.35,0.4,0.45,
  // 0.5, 0.55,0.6,0.65,0.7,0.75,0.8,0.85,0.9,0.95
//]

var bins = [
  0.01,0.1,0.2,0.3,0.4,
  0.5,0.6,0.7,0.8,0.9,0.99
];

var theta_bins = [
  0.01,0.1,0.2,0.3,0.4,
  0.5,0.6,0.7,0.8,0.9
]

var theta = 1;
var params75 = {a:45, b: 15};
var params50 = {a:30, b: 30};
var params25 = {a:15, b: 45};
var params100 = {a:50, b: 1};

var allComponents = [params25, params50, params75, params100]
//var allComponents = [{a:1, b:1}]

var nullParams = {a:1, b:5};

var makeComponent = function(params){
  return Categorical({
  vs: bins,
  ps: map(function(b) {
    probability(Beta(params), b) + Number.EPSILON
  }, bins )
})
}

var ThetaPrior = Infer({model: function(){
  var sampleTheta = function(){ uniformDraw(theta_bins) }
  var asia = sampleTheta();
  var africa = sampleTheta();
  return { asia, africa }
}});

var JointPrevalencePrior = Infer({model: function(){
//  var mainPlace = categorical({
//    ps:[1, 1, 1, 1e-10],
//    vs:[
//      {asia: true, africa: false},
//      {asia: false, africa: true},
//      {asia: false, africa: false},
//      {asia: true, africa: true}
//    ]
//  });
  var p =  {
    asia: sample(makeComponent({a: 1, b:1 })),
    africa: sample(makeComponent({a: 1, b:1 })),
  }
  var totalPrev = p.asia + p.africa 
  
  factor(totalPrev > 1 ? -10*Math.log(totalPrev) : 0)
  return p
}})


var meaning = function(utt, state, theta) {
  utt == "silence" ? true :
    state[utt] > theta[utt]
}

var listener0 = cache(function(utterance, thetas, PrevalencePriors) {
  Infer({model: function(){
    var state = sample(PrevalencePriors)
    var m = meaning(utterance, state, thetas)
    condition(m)
    return state
  }, method: "enumerate"})
}, 10000)

var alpha = 10
var speaker1 = cache(function(state, thetas, PrevalencePriors, continent){
  Infer({model: function(){
    var utterance = categorical({vs: [continent, "silence"], 
    ps: [0.1, 0.9]}) // alternative is only silence in both cases
    // display(utterance)
    var L0 = listener0(utterance, thetas, PrevalencePriors)
    // display(JSON.stringify(state))
    // display(JSON.stringify(L0))
    factor(alpha * L0.score(state))
    return utterance
  }, method: "enumerate"})
})

var listener1 = cache(function(utterance, PrevalencePriors, ThresholdPriors){
  Infer({model: function(){
    var state = sample(PrevalencePriors)
    var thetas = sample(ThresholdPriors)
    // display(state)
    var S1 = speaker1(state, thetas, PrevalencePriors, utterance)
    observe(S1, utterance)
    return {state, thetas}
  }, method: "enumerate"})
})

var Africa = listener1("africa", JointPrevalencePrior, ThetaPrior)
var africaStatePosterior = marginalize(Africa, "state")
var africaThresholdPosterior =  marginalize(Africa, "thetas");
display("africa")
var AfricaAsia = listener1("asia", 
    africaStatePosterior, africaThresholdPosterior)
    
var AfricaAndAsiaStatePosterior = marginalize(AfricaAsia, "state")
var x = {africaStatePosterior, AfricaAndAsiaStatePosterior, JointPrevalencePrior}

x
